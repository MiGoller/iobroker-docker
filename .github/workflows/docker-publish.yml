name: Docker

on:
  push:
    branches:
      - main
      - develop

    # Igore these files
    paths-ignore:
      - '**/README.md'
      - 'LICENSE'

  # Run tests for any PRs.
  pull_request:
    branches:
      - main
      - develop

  schedule:
    - cron: '15 0 * * 1' # Weekly on Monday at 00:15
  
  workflow_dispatch:
  
env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: "iobroker"
  IMAGE_VERSION: "1.0"
  NODE_VERSION: "12"

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest
    if: contains('pull_request', github.event_name)
    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  multi:
    # Ensure test job passes before pushing image.
    # needs: test

    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main')
        || (github.event_name == 'pull_request' && github.base_ref == 'refs/heads/main')
        || github.event_name == 'schedule'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Get version information
        id: image_information
        run: |
          IMAGE_ID=${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo ::set-output name=IMAGE_ID::${IMAGE_ID}
          echo ::set-output name=IMAGE_REF::${VERSION}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v7
          push: true
          tags: |
            ${{ steps.image_information.outputs.IMAGE_ID }}:latest
            ${{ steps.image_information.outputs.IMAGE_ID }}:${{ env.NODE_VERSION }}
            ghcr.io/${{ steps.image_information.outputs.IMAGE_ID }}:latest
            ghcr.io/${{ steps.image_information.outputs.IMAGE_ID }}:${{ env.NODE_VERSION }}
